generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "darwin"]
  engineType    = "binary"
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

model Admin {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  email             String    @unique
  name              String
  passwordHash      String
  role              AdminRole @default(ADMIN)
  active            Boolean   @default(true)
  lastLoginAt       DateTime?
  resetToken        String?   @unique
  resetTokenExpires DateTime?
  orders            Order[]   @relation("OrderDispatchedBy")
  auditLogs         AdminAuditLog[]
}

model StripeEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique @map("event_id")
  eventType   String   @map("event_type")
  processedAt DateTime @default(now()) @map("processed_at")

  @@map("stripe_events")
}

model BloodTest {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String
  slug            String       @unique
  description     String
  price           Float
  stripeProductId String?
  stripePriceId   String?
  isActive        Boolean      @default(true)
  orders          Order[]      @relation("OrderBloodTest")
  testResults     TestResult[] @relation("TestResultBloodTest")
}

model ClientUser {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  email             String        @unique
  passwordHash      String
  name              String
  dateOfBirth       String
  mobile            String?
  active            Boolean       @default(true)
  lastLoginAt       DateTime?
  resetToken        String?       @unique
  resetTokenExpires DateTime?
  stripeCustomerId  String?       @unique
  preferredContact  ContactMethod @default(EMAIL)
  must_reset_password Boolean     @default(false)
  orders            Order[]
  addresses         Address[]
  testResults       TestResult[]
}

enum ContactMethod {
  EMAIL
  MOBILE
}

model Order {
  id                 String       @id @default(cuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  patientName        String
  patientEmail       String
  patientDateOfBirth String
  patientMobile      String?
  testName           String
  notes              String?
  internalNotes      String?
  status             OrderStatus  @default(PENDING)
  paymentId          String?
  stripeSessionId    String?      @unique
  shippingAddress    Json?
  dispatchedAt       DateTime?
  dispatchedById     String?
  bloodTestId        String
  clientId           String?
  createAccount      Boolean      @default(false)
  bloodTest          BloodTest    @relation("OrderBloodTest", fields: [bloodTestId], references: [id])
  dispatchedBy       Admin?       @relation("OrderDispatchedBy", fields: [dispatchedById], references: [id])
  client             ClientUser?  @relation(fields: [clientId], references: [id])
  testResults        TestResult[] @relation("TestResultOrder")

  @@unique([patientEmail, createdAt])
}

enum OrderStatus {
  PENDING
  PAID
  DISPATCHED
  CANCELLED
  READY
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

model Address {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  type      AddressType
  name      String
  line1     String
  line2     String?
  city      String
  postcode  String
  country   String
  isDefault Boolean     @default(false)
  clientId  String
  client    ClientUser  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, type, isDefault])
}

enum AddressType {
  SHIPPING
  BILLING
}

model TestResult {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      TestStatus  @default(processing)
  resultUrl   String?
  metadata    Json? // For storing download metrics and other metadata
  orderId     String
  order       Order       @relation("TestResultOrder", fields: [orderId], references: [id], onDelete: Cascade)
  bloodTestId String
  bloodTest   BloodTest   @relation("TestResultBloodTest", fields: [bloodTestId], references: [id], onDelete: Cascade)
  clientId    String?
  client      ClientUser? @relation(fields: [clientId], references: [id], onDelete: SetNull)
}

enum TestStatus {
  processing
  ready
}

model AuditLog {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  action       String // e.g., DOWNLOAD_RESULT, VIEW_RESULT
  userId       String // ID of the user performing the action
  userRole     String // Role of the user (ADMIN, SUPER_ADMIN, PATIENT)
  resourceId   String // ID of the resource being accessed (e.g., test result ID)
  resourceType String // Type of resource (e.g., TEST_RESULT)
  metadata     Json? // Additional metadata about the action
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  adminId    String
  admin      Admin    @relation(fields: [adminId], references: [id])
  action     String
  details    Json?
  entityId   String?
  entityType String?
}
